<?php

/**
 * @file
 * Tide Landing Page install.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\search_api\Item\Field;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_install().
 */
function tide_landing_page_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'landing_page');
      $editorial_workflow->save();
    }
  }

  // Retroactively support existing content types in the Referred Content
  // field of Card automated paragraphs.
  $supported_paragraph_types = [
    'card_navigation_featured_auto',
    'card_navigation_auto',
    'card_promotion_auto',
  ];
  foreach ($supported_paragraph_types as $supported_paragraph_type) {
    $field_config = FieldConfig::loadByName("paragraph", $supported_paragraph_type, "field_paragraph_reference");
    if ($field_config) {
      $handler_settings = $field_config->getSetting('handler_settings');
      $info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
      foreach ($info as $type => $bundles) {
        if ($type == 'node') {
          foreach (array_keys($bundles) as $bundle) {
            $handler_settings['target_bundles'][$bundle] = $bundle;
          }
        }
      }
      $field_config->setSetting('handler_settings', $handler_settings);
      $field_config->save();
    }
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');
  $field_config = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field_config) {
    $handler_settings = $field_config->getSetting('handler_settings');
    // Add the Featured News paragraph to Landing Page component if exists.
    if ($moduleHandler->moduleExists('tide_news')) {
      $handler_settings['target_bundles']['featured_news'] = 'featured_news';
    }
    // Add the Embedded Webform paragraph to Landing Page component if exists.
    if ($moduleHandler->moduleExists('tide_webform')) {
      $handler_settings['target_bundles']['embedded_webform'] = 'embedded_webform';
    }
    $field_config->setSetting('handler_settings', $handler_settings);
    $field_config->save();
  }

  _tide_landing_page_add_fields_search_api();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_landing_page_update_dependencies() {
  $dependencies['tide_landing_page'][8001] = ['tide_core' => 8001];
  $dependencies['tide_landing_page'][8002] = ['tide_core' => 8002];

  return $dependencies;
}

/**
 * Refactor Show Social Sharing field.
 */
function tide_landing_page_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.node.landing_page.field_show_social_sharing', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_show_social_sharing') && $node->hasField('field_landing_page_show_social')) {
        $node->set('field_show_social_sharing', $node->get('field_landing_page_show_social'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Renamed field_page_feature_image to field_featured_image.
 */
function tide_landing_page_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.node.landing_page.field_featured_image', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_featured_image') && $node->hasField('field_page_feature_image')) {
        $node->set('field_featured_image', $node->get('field_page_feature_image'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Replace body with summary field.
 */
function tide_landing_page_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_landing_page_summary', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_summary', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('body') && $node->hasField('field_landing_page_summary')) {
        $node->set('field_landing_page_summary', $node->get('body')->summary);
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Add fields to search API.
 */
function _tide_landing_page_add_fields_search_api() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index the Intro field.
    $field_landing_page_intro = new Field($index, 'field_landing_page_intro_text');
    $field_landing_page_intro->setType('text');
    $field_landing_page_intro->setPropertyPath('field_landing_page_intro_text');
    $field_landing_page_intro->setDatasourceId('entity:node');
    $field_landing_page_intro->setLabel('Introduction text');
    $index->addField($field_landing_page_intro);

    // Index the summary field.
    $field_landing_page_summary = new Field($index, 'field_landing_page_summary');
    $field_landing_page_summary->setType('text');
    $field_landing_page_summary->setPropertyPath('field_landing_page_summary');
    $field_landing_page_summary->setDatasourceId('entity:node');
    $field_landing_page_summary->setBoost(1);
    $field_landing_page_summary->setLabel('Summary');
    $index->addField($field_landing_page_summary);

    // Index the field field_paragraph_body.
    $field_paragraph_body = new Field($index, 'field_paragraph_body');
    $field_paragraph_body->setType('text');
    $field_paragraph_body->setPropertyPath('field_landing_page_component:entity:field_paragraph_body');
    $field_paragraph_body->setDatasourceId('entity:node');
    $field_paragraph_body->setLabel('Content components » Paragraph » Body');
    $index->addField($field_paragraph_body);

    // Index the field field_paragraph_topic.
    $field_paragraph_topic = new Field($index, 'field_paragraph_topic');
    $field_paragraph_topic->setType('integer');
    $field_paragraph_topic->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic');
    $field_paragraph_topic->setDatasourceId('entity:node');
    $field_paragraph_topic->setLabel('Content components » Paragraph » Topic');
    $index->addField($field_paragraph_topic);

    // Index the field field_paragraph_topic_name.
    $field_paragraph_topic_name = new Field($index, 'field_paragraph_topic_name');
    $field_paragraph_topic_name->setType('integer');
    $field_paragraph_topic_name->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic:entity:name');
    $field_paragraph_topic_name->setDatasourceId('entity:node');
    $field_paragraph_topic_name->setBoost(5);
    $field_paragraph_topic_name->setLabel('Content components » Paragraph » Topic » Taxonomy term » Name');
    $index->addField($field_paragraph_topic_name);

    // Index the field field_paragraph_title.
    $field_paragraph_title = new Field($index, 'field_paragraph_title');
    $field_paragraph_title->setType('text');
    $field_paragraph_title->setPropertyPath('field_landing_page_component:entity:field_paragraph_title');
    $field_paragraph_title->setDatasourceId('entity:node');
    $field_paragraph_title->setLabel('Content components » Paragraph » Title');
    $field_paragraph_title->setBoost(13);
    $index->addField($field_paragraph_title);

    // Index the summary field field_paragraph_summary.
    $field_paragraph_summary = new Field($index, 'field_paragraph_summary');
    $field_paragraph_summary->setType('text');
    $field_paragraph_summary->setPropertyPath('field_landing_page_component:entity:field_paragraph_summary');
    $field_paragraph_summary->setDatasourceId('entity:node');
    $field_paragraph_summary->setLabel('Content components » Paragraph » Summary');
    $index->addField($field_paragraph_summary);

    // Index the summary field field_paragraph_accordion_name.
    $field_paragraph_accordion_name = new Field($index, 'field_paragraph_accordion_name');
    $field_paragraph_accordion_name->setType('text');
    $field_paragraph_accordion_name->setPropertyPath('field_landing_page_component:entity:field_paragraph_accordion_name');
    $field_paragraph_accordion_name->setDatasourceId('entity:node');
    $field_paragraph_accordion_name->setBoost(5);
    $field_paragraph_accordion_name->setLabel('Content components » Paragraph » Accordion Content » Paragraph » Item Name');
    $index->addField($field_paragraph_accordion_name);

    // Index the summary field field_paragraph_accordion_body.
    $field_paragraph_accordion_body = new Field($index, 'field_paragraph_accordion_body');
    $field_paragraph_accordion_body->setType('text');
    $field_paragraph_accordion_body->setPropertyPath('field_landing_page_component:entity:field_paragraph_accordion_body');
    $field_paragraph_accordion_body->setDatasourceId('entity:node');
    $field_paragraph_accordion_body->setLabel('Content components » Paragraph » Accordion Content » Paragraph » Body');
    $index->addField($field_paragraph_accordion_body);

    // Index the summary field field_landing_page_contact_name.
    $field_landing_page_contact_name = new Field($index, 'field_landing_page_contact_name');
    $field_landing_page_contact_name->setType('text');
    $field_landing_page_contact_name->setPropertyPath('field_landing_page_contact:entity:field_paragraph_name');
    $field_landing_page_contact_name->setDatasourceId('entity:node');
    $field_landing_page_contact_name->setBoost(1);
    $field_landing_page_contact_name->setLabel('Content components » Paragraph » Name');
    $index->addField($field_landing_page_contact_name);

    // Index the summary field field_landing_page_contact_body.
    $field_landing_page_contact_body = new Field($index, 'field_landing_page_contact_body');
    $field_landing_page_contact_body->setType('text');
    $field_landing_page_contact_body->setPropertyPath('field_landing_page_contact:entity:field_paragraph_body');
    $field_landing_page_contact_body->setDatasourceId('entity:node');
    $field_landing_page_contact_body->setLabel('Content components » Paragraph » Body');
    $index->addField($field_landing_page_contact_body);

    // Index the summary field field_paragraph_topic_uuid.
    $field_paragraph_topic_uuid = new Field($index, 'field_paragraph_topic_uuid');
    $field_paragraph_topic_uuid->setType('string');
    $field_paragraph_topic_uuid->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic:entity:uuid');
    $field_paragraph_topic_uuid->setDatasourceId('entity:node');
    $field_paragraph_topic_uuid->setLabel('Content components » Paragraph » Topic » Taxonomy term » UUID');
    $index->addField($field_paragraph_topic_uuid);

    $index->save();
  }
}

/**
 * Update default Style for existing CTA paragraphs.
 */
function tide_landing_page_update_8004() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_paragraph_cta_style', $config_location);
  _tide_import_single_config('field.field.paragraph.call_to_action.field_paragraph_cta_style', $config_location);

  $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')
    ->loadByProperties(['type' => 'call_to_action']);
  if ($paragraphs && count($paragraphs)) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    foreach ($paragraphs as $paragraph) {
      try {
        if ($paragraph->hasField('field_paragraph_cta_style')) {
          if ($paragraph->get('field_paragraph_cta_style')->isEmpty()) {
            $paragraph->set('field_paragraph_cta_style', 'banner');
            $paragraph->setNewRevision(FALSE);
            $paragraph->save();
          }
        }
      }
      catch (\Exception $e) {
        watchdog_exception('tide_landing_page', $e);
      }
    }
  }
}

/**
 * Replace show_news_search field by Header Component Embedded Search Form.
 */
function tide_landing_page_update_8005() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_paragraph_search_block', $config_location);
  _tide_import_single_config('field.field.paragraph.embedded_search_form.field_paragraph_search_block', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_header', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_show_news_search') && $node->field_show_news_search->getValue()[0]['value'] === 1) {

        $search_form_data = [
          'type' => 'embedded_search_form',
          'field_paragraph_search_block' => ['value' => 'news'],
        ];

        $search_form = Paragraph::create($search_form_data);
        $search_form->save();

        $node->field_landing_page_header->appendItem($search_form);
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Remove Show News Search Block? field [SDPA-1159].
 */
function tide_landing_page_update_8006() {
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  $fields = $entityFieldManager->getFieldDefinitions('node', 'landing_page');

  if (isset($fields['field_show_news_search'])) {
    $fields['field_show_news_search']->delete();
  }
}

/**
 * Forced update of the field using config from the module.
 */
function tide_landing_page_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.paragraph.social_link.field_paragraph_link', $config_location);
}

/**
 * Add Complex Image component.
 */
function tide_landing_page_update_8008() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $configs = [
    'paragraphs.paragraphs_type.complex_image',
    'field.storage.paragraph.field_complex_image_data',
    'field.storage.paragraph.field_complex_image_data_label',
    'field.storage.paragraph.field_complex_image_dl_label',
    'field.storage.paragraph.field_complex_image_full_label',
    'field.storage.paragraph.field_complex_image_media',
    'field.storage.paragraph.field_complex_image_source',
    'field.storage.paragraph.field_complex_image_title',
    'field.field.paragraph.complex_image.field_complex_image_data',
    'field.field.paragraph.complex_image.field_complex_image_data_label',
    'field.field.paragraph.complex_image.field_complex_image_dl_label',
    'field.field.paragraph.complex_image.field_complex_image_full_label',
    'field.field.paragraph.complex_image.field_complex_image_media',
    'field.field.paragraph.complex_image.field_complex_image_source',
    'field.field.paragraph.complex_image.field_complex_image_title',
    'core.entity_form_display.paragraph.complex_image.default',
    'core.entity_view_display.paragraph.complex_image.default',
  ];

  foreach ($configs as $config) {
    _tide_import_single_config($config, $config_location);
  }

  $field_config = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field_config) {
    $handler_settings = $field_config->getSetting('handler_settings');
    $handler_settings['target_bundles']['complex_image'] = 'complex_image';
    $field_config->setSetting('handler_settings', $handler_settings);
    $field_config->save();
  }
}

/**
 * Summary field in carousal Card event is restricted to 200 characters.
 */
function tide_landing_page_update_8009() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.card_event.default');
  $field_paragraph_summary = $entity_form_display->getComponent('field_paragraph_summary');
  if (!isset($field_paragraph_summary['third_party_settings']) || !isset($field_paragraph_summary['third_party_settings']['maxlength']['maxlength_js'])) {
    $field_paragraph_summary['third_party_settings'] = [
      'maxlength' => [
        'maxlength_js' => 200,
        'maxlength_js_label' => 'Content limited to @limit characters, remaining: @remaining',
        'maxlength_js_enforce' => FALSE,
        'maxlength_js_truncate_html' => FALSE,
      ],
    ];
    $entity_form_display->setComponent('field_paragraph_summary', $field_paragraph_summary);
    $entity_form_display->save();
  }
}

/**
 * Adds field Show Acknowledgement of Country.
 */
function tide_landing_page_update_8010() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $configs = [
    'field.storage.node.field_show_ack_of_country',
    'field.field.node.landing_page.field_show_ack_of_country',
  ];
  foreach ($configs as $config) {
    _tide_import_single_config($config, $config_location);
  }

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.landing_page.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_show_ack_of_country', [
      'weight' => 40,
      'settings' => ['display_label' => TRUE],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);

    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    if (!empty($field_group['group_header_content']['children'])) {
      if (!in_array('field_show_ack_of_country', $field_group['group_header_content']['children'])) {
        $field_group['group_header_content']['children'][] = 'field_show_ack_of_country';
        $entity_form_display->setThirdPartySetting('field_group', 'group_header_content', $field_group['group_header_content']);
      }
    }

    $entity_form_display->save();
  }
}

/**
 * Fixed missing disabled property in JSON:API Resource config of Card Event.
 */
function tide_landing_page_update_8011() {
  if (\Drupal::moduleHandler()->moduleExists('jsonapi_extras')) {
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
    _tide_import_single_config('jsonapi_extras.jsonapi_resource_config.paragraph--card_event', $config_location);
  }
}

/**
 * Add Show Hero Image caption field.
 */
function tide_landing_page_update_8012() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_show_hero_image_caption', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_show_hero_image_caption', $config_location);
}

/**
 * Add Show Primary Campaign caption field.
 */
function tide_landing_page_update_8013() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_show_c_primary_caption', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_show_c_primary_caption', $config_location);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.landing_page.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_show_c_primary_caption', [
      'weight' => 41,
      'settings' => ['display_label' => TRUE],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);

    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    if (!empty($field_group['group_top_banner']['children'])) {
      if (!in_array('field_show_c_primary_caption', $field_group['group_top_banner']['children'])) {
        $field_group['group_top_banner']['children'][] = 'field_show_c_primary_caption';
        $entity_form_display->setThirdPartySetting('field_group', 'group_top_banner', $field_group['group_top_banner']);
      }
    }

    $entity_form_display->save();
  }
}

/**
 * Adds timeline paragraph type to field_landing_page_component.
 */
function tide_landing_page_update_8014() {
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('timelines', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['timelines'] = 'timelines';
      $handler_settings['target_bundles_drag_drop']['timelines']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }
}

/**
 * Adds youtube option paragraph type to field_paragraph_social_list.
*/
function tide_landing_page_update_8015() {
  $field = FieldConfig::loadByName('paragraph', 'social_link', 'field_paragraph_social_list');
  $new_field = $field->getSettings()['allowed_values'];
  $new_field['youtube_channel'] = 'Youtube channel';
  $field->setSettings([
    'allowed_values' => $new_field,
  ]);
  $field->save();
}
