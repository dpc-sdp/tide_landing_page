<?php

/**
 * @file
 * Tide Landing Page install.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\search_api\Item\Field;
use Drupal\workflows\Entity\Workflow;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Component\Utility\NestedArray;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_install().
 */
function tide_landing_page_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'landing_page');
      $editorial_workflow->save();
    }
  }

  // Retroactively support existing content types in the Referred Content
  // field of Card automated paragraphs.
  $supported_paragraph_types = [
    'card_navigation_featured_auto',
    'card_navigation_auto',
    'card_promotion_auto',
  ];
  foreach ($supported_paragraph_types as $supported_paragraph_type) {
    $field_config = FieldConfig::loadByName("paragraph", $supported_paragraph_type, "field_paragraph_reference");
    if ($field_config) {
      $handler_settings = $field_config->getSetting('handler_settings');
      $info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
      foreach ($info as $type => $bundles) {
        if ($type == 'node') {
          foreach (array_keys($bundles) as $bundle) {
            $handler_settings['target_bundles'][$bundle] = $bundle;
          }
        }
      }
      $field_config->setSetting('handler_settings', $handler_settings);
      $field_config->save();
    }
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');
  $field_config = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field_config) {
    $handler_settings = $field_config->getSetting('handler_settings');
    // Add the Featured News paragraph to Landing Page component if exists.
    if ($moduleHandler->moduleExists('tide_news')) {
      $handler_settings['target_bundles']['featured_news'] = 'featured_news';
    }
    // Add the Embedded Webform paragraph to Landing Page component if exists.
    if ($moduleHandler->moduleExists('tide_webform')) {
      $handler_settings['target_bundles']['embedded_webform'] = 'embedded_webform';
    }
    $field_config->setSetting('handler_settings', $handler_settings);
    $field_config->save();
  }

  _tide_landing_page_add_fields_search_api();

  // Enable entity type/bundles for use with scheduled transitions.
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('landing_page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'landing_page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'landing_page'];
      $config->set('bundles', $bundles)->save();
    }
  }

  tide_landing_page_update_8037();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_landing_page_update_dependencies() {
  $dependencies['tide_landing_page'][8001] = ['tide_core' => 8001];
  $dependencies['tide_landing_page'][8002] = ['tide_core' => 8002];
  $dependencies['tide_landing_page'][8010] = ['system' => 8805];
  $dependencies['tide_landing_page'][8015] = ['system' => 8805];
  $dependencies['tide_landing_page'][8016] = ['system' => 8805];
  $dependencies['tide_landing_page'][8032] = ['tide_core' => 8037];
  $dependencies['tide_landing_page'][8036] = ['tide_core' => 8045];

  return $dependencies;
}

/**
 * Refactor Show Social Sharing field.
 */
function tide_landing_page_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.node.landing_page.field_show_social_sharing', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_show_social_sharing') && $node->hasField('field_landing_page_show_social')) {
        $node->set('field_show_social_sharing', $node->get('field_landing_page_show_social'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Renamed field_page_feature_image to field_featured_image.
 */
function tide_landing_page_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.node.landing_page.field_featured_image', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_featured_image') && $node->hasField('field_page_feature_image')) {
        $node->set('field_featured_image', $node->get('field_page_feature_image'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Replace body with summary field.
 */
function tide_landing_page_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_landing_page_summary', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_summary', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('body') && $node->hasField('field_landing_page_summary')) {
        $node->set('field_landing_page_summary', $node->get('body')->summary);
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Add fields to search API.
 */
function _tide_landing_page_add_fields_search_api() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index the Intro field.
    $field_landing_page_intro = new Field($index, 'field_landing_page_intro_text');
    $field_landing_page_intro->setType('text');
    $field_landing_page_intro->setPropertyPath('field_landing_page_intro_text');
    $field_landing_page_intro->setDatasourceId('entity:node');
    $field_landing_page_intro->setLabel('Introduction text');
    $index->addField($field_landing_page_intro);

    // Index the summary field.
    $field_landing_page_summary = new Field($index, 'field_landing_page_summary');
    $field_landing_page_summary->setType('text');
    $field_landing_page_summary->setPropertyPath('field_landing_page_summary');
    $field_landing_page_summary->setDatasourceId('entity:node');
    $field_landing_page_summary->setBoost(1);
    $field_landing_page_summary->setLabel('Summary');
    $index->addField($field_landing_page_summary);

    // Index the field field_paragraph_body.
    $field_paragraph_body = new Field($index, 'field_paragraph_body');
    $field_paragraph_body->setType('text');
    $field_paragraph_body->setPropertyPath('field_landing_page_component:entity:field_paragraph_body');
    $field_paragraph_body->setDatasourceId('entity:node');
    $field_paragraph_body->setLabel('Content components » Paragraph » Body');
    $index->addField($field_paragraph_body);

    // Index the field field_paragraph_topic.
    $field_paragraph_topic = new Field($index, 'field_paragraph_topic');
    $field_paragraph_topic->setType('integer');
    $field_paragraph_topic->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic');
    $field_paragraph_topic->setDatasourceId('entity:node');
    $field_paragraph_topic->setLabel('Content components » Paragraph » Topic');
    $index->addField($field_paragraph_topic);

    // Index the field field_paragraph_topic_name.
    $field_paragraph_topic_name = new Field($index, 'field_paragraph_topic_name');
    $field_paragraph_topic_name->setType('integer');
    $field_paragraph_topic_name->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic:entity:name');
    $field_paragraph_topic_name->setDatasourceId('entity:node');
    $field_paragraph_topic_name->setBoost(5);
    $field_paragraph_topic_name->setLabel('Content components » Paragraph » Topic » Taxonomy term » Name');
    $index->addField($field_paragraph_topic_name);

    // Index the field field_paragraph_title.
    $field_paragraph_title = new Field($index, 'field_paragraph_title');
    $field_paragraph_title->setType('text');
    $field_paragraph_title->setPropertyPath('field_landing_page_component:entity:field_paragraph_title');
    $field_paragraph_title->setDatasourceId('entity:node');
    $field_paragraph_title->setLabel('Content components » Paragraph » Title');
    $field_paragraph_title->setBoost(13);
    $index->addField($field_paragraph_title);

    // Index the summary field field_paragraph_summary.
    $field_paragraph_summary = new Field($index, 'field_paragraph_summary');
    $field_paragraph_summary->setType('text');
    $field_paragraph_summary->setPropertyPath('field_landing_page_component:entity:field_paragraph_summary');
    $field_paragraph_summary->setDatasourceId('entity:node');
    $field_paragraph_summary->setLabel('Content components » Paragraph » Summary');
    $index->addField($field_paragraph_summary);

    // Index the summary field field_paragraph_accordion_name.
    $field_paragraph_accordion_name = new Field($index, 'field_paragraph_accordion_name');
    $field_paragraph_accordion_name->setType('text');
    $field_paragraph_accordion_name->setPropertyPath('field_landing_page_component:entity:field_paragraph_accordion_name');
    $field_paragraph_accordion_name->setDatasourceId('entity:node');
    $field_paragraph_accordion_name->setBoost(5);
    $field_paragraph_accordion_name->setLabel('Content components » Paragraph » Accordion Content » Paragraph » Item Name');
    $index->addField($field_paragraph_accordion_name);

    // Index the summary field field_paragraph_accordion_body.
    $field_paragraph_accordion_body = new Field($index, 'field_paragraph_accordion_body');
    $field_paragraph_accordion_body->setType('text');
    $field_paragraph_accordion_body->setPropertyPath('field_landing_page_component:entity:field_paragraph_accordion_body');
    $field_paragraph_accordion_body->setDatasourceId('entity:node');
    $field_paragraph_accordion_body->setLabel('Content components » Paragraph » Accordion Content » Paragraph » Body');
    $index->addField($field_paragraph_accordion_body);

    // Index the summary field field_landing_page_contact_name.
    $field_landing_page_contact_name = new Field($index, 'field_landing_page_contact_name');
    $field_landing_page_contact_name->setType('text');
    $field_landing_page_contact_name->setPropertyPath('field_landing_page_contact:entity:field_paragraph_name');
    $field_landing_page_contact_name->setDatasourceId('entity:node');
    $field_landing_page_contact_name->setBoost(1);
    $field_landing_page_contact_name->setLabel('Content components » Paragraph » Name');
    $index->addField($field_landing_page_contact_name);

    // Index the summary field field_landing_page_contact_body.
    $field_landing_page_contact_body = new Field($index, 'field_landing_page_contact_body');
    $field_landing_page_contact_body->setType('text');
    $field_landing_page_contact_body->setPropertyPath('field_landing_page_contact:entity:field_paragraph_body');
    $field_landing_page_contact_body->setDatasourceId('entity:node');
    $field_landing_page_contact_body->setLabel('Content components » Paragraph » Body');
    $index->addField($field_landing_page_contact_body);

    // Index the summary field field_paragraph_topic_uuid.
    $field_paragraph_topic_uuid = new Field($index, 'field_paragraph_topic_uuid');
    $field_paragraph_topic_uuid->setType('string');
    $field_paragraph_topic_uuid->setPropertyPath('field_landing_page_component:entity:field_paragraph_topic:entity:uuid');
    $field_paragraph_topic_uuid->setDatasourceId('entity:node');
    $field_paragraph_topic_uuid->setLabel('Content components » Paragraph » Topic » Taxonomy term » UUID');
    $index->addField($field_paragraph_topic_uuid);

    $index->save();
  }
}

/**
 * Update default Style for existing CTA paragraphs.
 */
function tide_landing_page_update_8004() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_paragraph_cta_style', $config_location);
  _tide_import_single_config('field.field.paragraph.call_to_action.field_paragraph_cta_style', $config_location);

  $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')
    ->loadByProperties(['type' => 'call_to_action']);
  if ($paragraphs && count($paragraphs)) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    foreach ($paragraphs as $paragraph) {
      try {
        if ($paragraph->hasField('field_paragraph_cta_style')) {
          if ($paragraph->get('field_paragraph_cta_style')->isEmpty()) {
            $paragraph->set('field_paragraph_cta_style', 'banner');
            $paragraph->setNewRevision(FALSE);
            $paragraph->save();
          }
        }
      }
      catch (\Exception $e) {
        watchdog_exception('tide_landing_page', $e);
      }
    }
  }
}

/**
 * Replace show_news_search field by Header Component Embedded Search Form.
 */
function tide_landing_page_update_8005() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_paragraph_search_block', $config_location);
  _tide_import_single_config('field.field.paragraph.embedded_search_form.field_paragraph_search_block', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_landing_page_header', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'landing_page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_show_news_search') && $node->field_show_news_search->getValue()[0]['value'] === 1) {

        $search_form_data = [
          'type' => 'embedded_search_form',
          'field_paragraph_search_block' => ['value' => 'news'],
        ];

        $search_form = Paragraph::create($search_form_data);
        $search_form->save();

        $node->field_landing_page_header->appendItem($search_form);
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Remove Show News Search Block? field [SDPA-1159].
 */
function tide_landing_page_update_8006() {
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  $fields = $entityFieldManager->getFieldDefinitions('node', 'landing_page');

  if (isset($fields['field_show_news_search'])) {
    $fields['field_show_news_search']->delete();
  }
}

/**
 * Forced update of the field using config from the module.
 */
function tide_landing_page_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.field.paragraph.social_link.field_paragraph_link', $config_location);
}

/**
 * Add Complex Image component.
 */
function tide_landing_page_update_8008() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $configs = [
    'paragraphs.paragraphs_type.complex_image',
    'field.storage.paragraph.field_complex_image_data',
    'field.storage.paragraph.field_complex_image_data_label',
    'field.storage.paragraph.field_complex_image_dl_label',
    'field.storage.paragraph.field_complex_image_full_label',
    'field.storage.paragraph.field_complex_image_media',
    'field.storage.paragraph.field_complex_image_source',
    'field.storage.paragraph.field_complex_image_title',
    'field.field.paragraph.complex_image.field_complex_image_data',
    'field.field.paragraph.complex_image.field_complex_image_data_label',
    'field.field.paragraph.complex_image.field_complex_image_dl_label',
    'field.field.paragraph.complex_image.field_complex_image_full_label',
    'field.field.paragraph.complex_image.field_complex_image_media',
    'field.field.paragraph.complex_image.field_complex_image_source',
    'field.field.paragraph.complex_image.field_complex_image_title',
    'core.entity_form_display.paragraph.complex_image.default',
    'core.entity_view_display.paragraph.complex_image.default',
  ];

  foreach ($configs as $config) {
    _tide_import_single_config($config, $config_location);
  }

  $field_config = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field_config) {
    $handler_settings = $field_config->getSetting('handler_settings');
    $handler_settings['target_bundles']['complex_image'] = 'complex_image';
    $field_config->setSetting('handler_settings', $handler_settings);
    $field_config->save();
  }
}

/**
 * Summary field in carousal Card event is restricted to 200 characters.
 */
function tide_landing_page_update_8009() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.card_event.default');
  $field_paragraph_summary = $entity_form_display->getComponent('field_paragraph_summary');
  if (!isset($field_paragraph_summary['third_party_settings']) || !isset($field_paragraph_summary['third_party_settings']['maxlength']['maxlength_js'])) {
    $field_paragraph_summary['third_party_settings'] = [
      'maxlength' => [
        'maxlength_js' => 200,
        'maxlength_js_label' => 'Content limited to @limit characters, remaining: @remaining',
        'maxlength_js_enforce' => FALSE,
        'maxlength_js_truncate_html' => FALSE,
      ],
    ];
    $entity_form_display->setComponent('field_paragraph_summary', $field_paragraph_summary);
    $entity_form_display->save();
  }
}

/**
 * Adds field Show Acknowledgement of Country.
 */
function tide_landing_page_update_8010() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $configs = [
    'field.storage.node.field_show_ack_of_country',
    'field.field.node.landing_page.field_show_ack_of_country',
  ];
  foreach ($configs as $config) {
    _tide_import_single_config($config, $config_location);
  }

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.landing_page.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_show_ack_of_country', [
      'weight' => 40,
      'settings' => ['display_label' => TRUE],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);

    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    if (!empty($field_group['group_header_content']['children'])) {
      if (!in_array('field_show_ack_of_country', $field_group['group_header_content']['children'])) {
        $field_group['group_header_content']['children'][] = 'field_show_ack_of_country';
        $entity_form_display->setThirdPartySetting('field_group', 'group_header_content', $field_group['group_header_content']);
      }
    }

    $entity_form_display->save();
  }
}

/**
 * Fixed missing disabled property in JSON:API Resource config of Card Event.
 */
function tide_landing_page_update_8011() {
  if (\Drupal::moduleHandler()->moduleExists('jsonapi_extras')) {
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
    _tide_import_single_config('jsonapi_extras.jsonapi_resource_config.paragraph--card_event', $config_location);
  }
}

/**
 * Add Show Hero Image caption field.
 */
function tide_landing_page_update_8012() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_show_hero_image_caption', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_show_hero_image_caption', $config_location);
}

/**
 * Add Show Primary Campaign caption field.
 */
function tide_landing_page_update_8013() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_show_c_primary_caption', $config_location);
  _tide_import_single_config('field.field.node.landing_page.field_show_c_primary_caption', $config_location);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.landing_page.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_show_c_primary_caption', [
      'weight' => 41,
      'settings' => ['display_label' => TRUE],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);

    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    if (!empty($field_group['group_top_banner']['children'])) {
      if (!in_array('field_show_c_primary_caption', $field_group['group_top_banner']['children'])) {
        $field_group['group_top_banner']['children'][] = 'field_show_c_primary_caption';
        $entity_form_display->setThirdPartySetting('field_group', 'group_top_banner', $field_group['group_top_banner']);
      }
    }

    $entity_form_display->save();
  }
}

/**
 * Adds timeline paragraph type to field_landing_page_component.
 */
function tide_landing_page_update_8014() {
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('timelines', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['timelines'] = 'timelines';
      $handler_settings['target_bundles_drag_drop']['timelines']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }
}

/**
 * Adds youtube option paragraph type to field_paragraph_social_list.
 */
function tide_landing_page_update_8015() {
  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_paragraph_social_list');
  $new_field = $field_storage->getSettings()['allowed_values'];
  $new_field['youtube_channel'] = 'Youtube channel';
  $field_storage->setSettings([
    'allowed_values' => $new_field,
  ]);
  $field_storage->save();
}

/**
 * Updated Embedded Search Form component.
 */
function tide_landing_page_update_8016() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = EntityFormDisplay::load('paragraph.embedded_search_form.default');
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
  $view_display = EntityViewDisplay::load('paragraph.embedded_search_form.default');

  // Add Custom to the field_paragraph_search_block.
  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_paragraph_search_block');
  if (!$field_storage) {
    return;
  }
  $current_allowed_values = $field_storage->getSetting('allowed_values');
  $current_allowed_values['none'] = 'Full site search';
  $current_allowed_values['custom'] = 'Custom';
  $field_storage->setSetting('allowed_values', $current_allowed_values);
  $field_storage->save();

  // Add Search URL field.
  $field_name = 'field_paragraph_search_url';
  if (!FieldStorageConfig::loadByName('paragraph', $field_name)) {
    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'type' => 'string_long',
      'settings' => [
        'case_sensitive' => FALSE,
      ],
      'cardinality' => 1,
    ]);
    $field_storage->save();
  }

  if (!FieldConfig::loadByName('paragraph', 'embedded_search_form', $field_name)) {
    $field_config = FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'bundle' => 'embedded_search_form',
      'label' => 'Search URL',
      'description' => 'Provides the URL of the custom search. Use the token <em>[SEARCH-KEYWORDS]</em> as a placeholder for the actual search keywords, eg. <em>https://www.google.com.au/search?q=[SEARCH-KEYWORDS]</em>',
      'settings' => [],
      'field_type' => 'string_long',
      'required' => FALSE,
    ]);
    $field_config->save();

    if (!$field_config->isNew()) {
      // Add the field to paragraph form.
      if ($form_display) {
        $form_display->setComponent($field_name, [
          'weight' => 102,
          'settings' => [
            'rows' => 5,
            'placeholder' => '',
          ],
          'third_party_settings' => [],
          'type' => 'string_textarea',
          'region' => 'content',
        ])->save();
      }

      // Add field to paragraph display.
      if ($view_display) {
        $view_display->setComponent($field_name, [
          'weight' => 1,
          'label' => 'above',
          'settings' => [],
          'third_party_settings' => [],
          'type' => 'basic_string',
          'region' => 'content',
        ])->save();
      }
    }
  }

  // Add Search placeholder field.
  $field_name = 'field_paragraph_search_ph';
  if (!FieldStorageConfig::loadByName('paragraph', $field_name)) {
    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'is_ascii' => FALSE,
        'case_sensitive' => FALSE,
      ],
      'cardinality' => 1,
    ]);
    $field_storage->save();
  }

  if (!FieldConfig::loadByName('paragraph', 'embedded_search_form', $field_name)) {
    $field_config = FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'bundle' => 'embedded_search_form',
      'label' => 'Placeholder text',
      'description' => '',
      'settings' => [],
      'default_value' => 'Start typing...',
      'field_type' => 'string',
      'required' => FALSE,
    ]);
    $field_config->save();

    if (!$field_config->isNew()) {
      // Add the field to paragraph form.
      if ($form_display) {
        $form_display->setComponent($field_name, [
          'weight' => 103,
          'settings' => [
            'size' => 60,
            'placeholder' => '',
          ],
          'third_party_settings' => [],
          'type' => 'string_textfield',
          'region' => 'content',
        ])->save();
      }

      // Add field to paragraph display.
      if ($view_display) {
        $view_display->setComponent($field_name, [
          'weight' => 2,
          'label' => 'above',
          'settings' => [
            'link_to_entity' => FALSE,
          ],
          'third_party_settings' => [],
          'type' => 'string',
          'region' => 'content',
        ])->save();
      }
    }
  }

  // Add Search target field.
  $field_name = 'field_paragraph_search_target';
  if (!FieldStorageConfig::loadByName('paragraph', $field_name)) {
    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'type' => 'boolean',
      'settings' => [],
      'cardinality' => 1,
    ]);
    $field_storage->save();
  }

  if (!FieldConfig::loadByName('paragraph', 'embedded_search_form', $field_name)) {
    $field_config = FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'paragraph',
      'bundle' => 'embedded_search_form',
      'label' => 'Open the Search page in new tab',
      'description' => '',
      'settings' => [
        'on_label' => 'On',
        'off_label' => 'Off',
      ],
      'default_value' => 0,
      'field_type' => 'boolean',
      'required' => FALSE,
    ]);
    $field_config->save();

    if (!$field_config->isNew()) {
      // Add the field to paragraph form.
      if ($form_display) {
        $form_display->setComponent($field_name, [
          'weight' => 104,
          'settings' => [
            'display_label' => TRUE,
          ],
          'third_party_settings' => [],
          'type' => 'boolean_checkbox',
          'region' => 'content',
        ])->save();
      }

      // Add field to paragraph display.
      if ($view_display) {
        $view_display->setComponent($field_name, [
          'weight' => 3,
          'label' => 'above',
          'settings' => [
            'format' => 'default',
            'format_custom_false' => '',
            'format_custom_true' => '',
          ],
          'third_party_settings' => [],
          'type' => 'string',
          'region' => 'content',
        ])->save();
      }
    }
  }
}

/**
 * Adds field_paragraph_display_topic to card_promotion_auto.
 */
function tide_landing_page_update_8017() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_paragraph_display_topic', $config_location);
  _tide_import_single_config('field.field.paragraph.card_promotion_auto.field_paragraph_display_topic', $config_location);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.card_promotion_auto.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_paragraph_display_topic', [
      'weight' => 106,
      'settings' => ['display_label' => TRUE],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);

    $entity_form_display->save();
  }
}

/**
 * Updates Call to action component to enable WYSIWYG.
 */
function tide_landing_page_update_8018() {
  $field = FieldConfig::loadByName('paragraph', 'call_to_action', 'field_paragraph_body');
  $settings = $field->getThirdPartySettings('allowed_formats');
  if ($settings) {
    $field->setThirdPartySetting('allowed_formats', 'plain_text', '0');
    $field->save();
  }
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_landing_page_update_8019() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('landing_page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'landing_page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'landing_page'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Fixes the issue between target_bundles_drag_drop and target_bundles.
 */
function tide_landing_page_update_8020() {
  $field_storage = FieldStorageConfig::loadByName('node', 'field_landing_page_component');
  foreach ($field_storage->getBundles() as $bundle) {
    $changed = FALSE;
    $field = \Drupal::entityTypeManager()
      ->getStorage('field_config')
      ->load('node.' . $bundle . '.field_landing_page_component');
    $settings = $field->get('settings');
    $target_bundles_drag_drop = [];
    if (isset($settings['handler_settings']['target_bundles_drag_drop']) && !empty($settings['handler_settings']['target_bundles_drag_drop'])) {
      foreach ($settings['handler_settings']['target_bundles_drag_drop'] as $key => $tbdd) {
        if ($tbdd['enabled']) {
          $target_bundles_drag_drop[$key] = $key;
        }
      }
    }
    // Compares target_bundles_drag_drop and target_bundles to find the
    // difference, and fills the gap.
    if ($diffs = array_diff($target_bundles_drag_drop, $settings['handler_settings']['target_bundles'])) {
      $settings['handler_settings']['target_bundles'] = array_merge($settings['handler_settings']['target_bundles'], $diffs);
      $changed = TRUE;
    }
    if ($diffs = array_diff($settings['handler_settings']['target_bundles'], $target_bundles_drag_drop)) {
      foreach ($diffs as $diff) {
        NestedArray::setValue($settings['handler_settings']['target_bundles_drag_drop'], [
          $diff,
          'enabled',
        ], TRUE);
      }
      $changed = TRUE;
    }
    if ($changed) {
      $field->set('settings', $settings);
      $field->save();
    }
  }
}

/**
 * Moves Site-section navigation title next to Show site section navigation.
 */
function tide_landing_page_update_8021() {
  $entity_view_display_storage = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display');
  $entity_view_display_id = 'node.landing_page.default';
  $entity_view_display = $entity_view_display_storage->load($entity_view_display_id);
  $content = $entity_view_display->get('content');
  if (isset($content['field_show_site_section_nav']) && isset($content['field_landing_page_nav_title'])) {
    $content['field_landing_page_nav_title']['weight'] = $content['field_show_site_section_nav']['weight'] + 1;
    $entity_view_display->set('content', $content)->save();
  }
}

/**
 * Add placeholder and helper texts to Image gallery autocomplete field.
 */
function tide_landing_page_update_8022() {
  // Update placeholder field.
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.media_gallery.default');

  $content = $entity_form_display->get('content');
  if (isset($content['field_paragraph_media_gallery'])) {
    $content['field_paragraph_media_gallery']['settings']['placeholder'] = 'Start typing to select';
    $entity_form_display->set('content', $content)->save();
  }

  // Update label and description.
  $fields = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->loadByProperties(['field_name' => 'field_paragraph_media_gallery']);

  foreach ($fields as $field) {
    $gallery_field = $field->toArray();
    $gallery_field['label'] = 'Gallery name';
    $gallery_field['description'] = 'New galleries can be created <a href="/admin/structure/block/block-content">here</a><br>Find out <a href="https://www.singledigitalpresence.vic.gov.au/create-image-gallery">how to create an image gallery</a>';

    $gallery_field = FieldConfig::create($gallery_field);
    $gallery_field->original = $field;
    $gallery_field->enforceIsNew(FALSE);
    $gallery_field->save();
  }
}

/**
 * Hides field_paragraph_link field, and changes help text.
 */
function tide_landing_page_update_8023() {
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.keydates.default');
  $components = $entity_form_display->getComponents();
  if (isset($components['field_paragraph_link'])) {
    unset($components['field_paragraph_link']);
    $entity_form_display->set('content', $components);
    $hidden = $entity_form_display->get('hidden');
    $hidden['field_paragraph_link'] = TRUE;
    $entity_form_display->set('hidden', $hidden);
    $entity_form_display->save();
  }
  $field_paragraph_summary = $entity_form_display->getComponent('field_paragraph_summary');
  if (isset($field_paragraph_summary['third_party_settings']['maxlength']['maxlength_js_label'])) {
    $field_paragraph_summary['third_party_settings']['maxlength']['maxlength_js_label'] = 'A brief description of the public holiday or special date. Max @limit characters, remaining: <strong>@remaining</strong>';
    $entity_form_display->setComponent('field_paragraph_summary', $field_paragraph_summary)->save();
  }
  $field_paragraph_title = $entity_form_display->getComponent('field_paragraph_title');
  if ($field_paragraph_title['third_party_settings']['maxlength']['maxlength_js_label']) {
    $field_paragraph_title['third_party_settings']['maxlength']['maxlength_js_label'] = 'Title of the public holiday or special date. Max @limit characters, preferred <70 characters; remaining: <strong>@remaining</strong>';
    $entity_form_display->setComponent('field_paragraph_title', $field_paragraph_title)->save();
  }
  // Change field_paragraph_keydate label to Date.
  $config = \Drupal::configFactory()
    ->getEditable('field.field.paragraph.keydates.field_paragraph_keydate');
  $config->set('label', 'Date');
  $config->set('description', "The date or date range you'd like displayed (eg 1 January 2021; 2 April to 5 April 2020). No abbreviations or punctuation. Use ‘to’ (not a dash) to separate a date span.");
  $config->save();
}

/**
 * Imports new fields to introduction_banner bundle.
 */
function tide_landing_page_update_8024() {
  $configs = [
    'field.storage.paragraph.field_call_to_action_title' => 'field_storage_config',
    'field.storage.paragraph.field_banner_type' => 'field_storage_config',
    'field.storage.paragraph.field_banner_display_type' => 'field_storage_config',
    'field.field.paragraph.introduction_banner.field_paragraph_body' => 'field_config',
    'field.field.paragraph.introduction_banner.field_call_to_action_title' => 'field_config',
    'field.field.paragraph.introduction_banner.field_banner_type' => 'field_config',
    'field.field.paragraph.introduction_banner.field_banner_display_type' => 'field_config',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  // Changes Feature links to Links.
  $field_paragraph_links = \Drupal::configFactory()
    ->getEditable('field.field.paragraph.introduction_banner.field_paragraph_links');
  $field_paragraph_links->set('label', 'Links');
  $field_paragraph_links->save();
}

/**
 * Migreates field_paragraph_summary to field_paragraph_body.
 */
function tide_landing_page_update_8025(&$sandbox) {
  $wysiwyg = 'field_paragraph_body';
  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityTypeManager()
      ->getStorage('paragraph')
      ->getQuery()
      ->condition('type', 'introduction_banner')
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;
  }
  $batch_size = 10;
  $paragraph_ids = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->getQuery()
    ->condition('id', $sandbox['current'], '>')
    ->condition('type', 'introduction_banner')
    ->sort('id', 'ASC')
    ->range(0, $batch_size)
    ->execute();
  foreach ($paragraph_ids as $paragraph_id) {
    $sandbox['current'] = $paragraph_id;
    $paragraph = Paragraph::load($paragraph_id);
    if ($paragraph && $paragraph->hasField($wysiwyg) && $paragraph->hasField('field_paragraph_summary')) {
      $paragraph->{$wysiwyg}->value = $paragraph->field_paragraph_summary->value;
      $paragraph->{$wysiwyg}->format = 'rich_text';
      $paragraph->setNewRevision(FALSE);
      $paragraph->save();
    }
    $sandbox['processed']++;
  }
  $sandbox['#finished'] = $sandbox['total'] ? $sandbox['processed'] / $sandbox['total'] : 1;
  $sandbox['#finished'] = $sandbox['#finished'] > 1 ? 1 : $sandbox['#finished'];
}

/**
 * Deletes field_paragraph_summary from introduction_banner paragraphs.
 */
function tide_landing_page_update_8026() {
  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_paragraph_summary');
  if (!empty($field_storage) && in_array('introduction_banner', $field_storage->getBundles())) {
    $field_config = FieldConfig::loadByName('paragraph', 'introduction_banner', 'field_paragraph_summary');
    $field_config->delete();
  }
}

/**
 * Re-order the introduction_banner entity form.
 */
function tide_landing_page_update_8027() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $config_ids = [
    'core.entity_form_display.paragraph.introduction_banner.default',
    'core.entity_view_display.paragraph.introduction_banner.default',
  ];
  foreach ($config_ids as $config_id) {
    $config = \Drupal::configFactory()->getEditable($config_id);
    $config_read = _tide_read_config($config_id, $config_location, FALSE);
    $fields_settings = $config_read['content'];
    $hidden = $config_read['hidden'];
    $config->set('content', $fields_settings);
    $config->set('hidden', $hidden);
    $config->save();
  }
}

/**
 * Add the new paragraph type form_embed_openforms.
 */
function tide_landing_page_update_8028() {
  $new_configs = [
    'paragraphs.paragraphs_type.form_embed_openforms',
    'core.entity_form_display.paragraph.form_embed_openforms.default',
    'core.entity_view_display.paragraph.form_embed_openforms.default',
  ];

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $config_storage = \Drupal::service('config.storage');
  foreach ($new_configs as $config) {
    // Check if field already exported to config/sync.
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $config_storage->write($config, $config_read);
  }

  $link_field_storage = 'field.storage.paragraph.field_form_link';
  $config_read = _tide_read_config($link_field_storage, $config_location, TRUE);
  // Obtain the storage manager for field storage bases.
  // Create a new field from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_storage_config')
    ->create($config_read)
    ->save();

  $link_field = 'field.field.paragraph.form_embed_openforms.field_form_link';
  $config_read = _tide_read_config($link_field, $config_location, TRUE);
  // Obtain the storage manager for field instances.
  // Create a new field instance from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_config')
    ->create($config_read)
    ->save();

  // Add the new paragraph type to field_landing_page_component.
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('form_embed_openforms', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['form_embed_openforms'] = 'form_embed_openforms';
      $handler_settings['target_bundles_drag_drop']['form_embed_openforms']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }

  // Add the field to JSON API.
  if (\Drupal::moduleHandler()->moduleExists('jsonapi_extras')) {
    $json_field = 'jsonapi_extras.jsonapi_resource_config.paragraph--form_embed_openforms';
    $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
    $config_read = _tide_read_config($json_field, $config_location, TRUE);
    $config_storage->write($json_field, $config_read);
  }

  // Update embedded_webform paragraph type label.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('paragraphs.paragraphs_type.embedded_webform');
  $config->set('label', 'Form embed (Drupal)');
  $config->save();
}

/**
 * Create field status.
 */
function tide_landing_page_update_8029() {
  $configs = [
    'field.storage.paragraph.field_paragraph_status' => 'field_storage_config',
    'field.field.paragraph.card_event.field_paragraph_status' => 'field_config',
  ];

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];

  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
}

/**
 * Add status fields to form display.
 */
function tide_landing_page_update_8030() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.paragraph.card_event.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.paragraph.card_event.field_paragraph_status', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.card_event.field_paragraph_status';
    $config->set('dependencies.config', $dependencies);
  }

  $content = $config->get('content');
  if (!isset($content['field_paragraph_status'])) {
    $content['field_paragraph_status'] = [
      'type' => 'string_textfield',
      'weight' => 7,
      'region' => 'content',
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
    ];
    $config->set('content', $content);
  }

  $config->save();
}

/**
 * Add status fields to json output.
 */
function tide_landing_page_update_8031() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.paragraph--card_event');

  $content = $config->get('resourceFields');
  if (!isset($content['field_paragraph_status'])) {
    $content['field_paragraph_status'] = [
      'fieldName' => 'field_paragraph_status',
      'publicName' => 'field_paragraph_status',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
      'advancedOptionsIcon' => '',
      'enhancer_label' => '',
    ];

    $config->set('resourceFields', $content);
  }

  $config->save();
}

/**
 * Add field display headings for table of contents.
 */
function tide_landing_page_update_8032() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  $new_field = 'field.field.node.landing_page.field_node_display_headings';
  $config_read = _tide_read_config($new_field, $config_location, TRUE);
  // Obtain the storage manager for field instances.
  // Create a new field instance from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_config')
    ->create($config_read)
    ->save();

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.landing_page.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.landing_page.field_node_display_headings', $dependencies)) {
    $dependencies[] = 'field.field.node.landing_page.field_node_display_headings';
    $config->set('dependencies.config', $dependencies);
  }

  $third_party_settings = $config->get('third_party_settings.field_group.group_components.children');
  if (!isset($third_party_settings['field_node_display_headings'])) {
    $third_party_settings = [
      'field_show_table_of_content',
      'field_node_display_headings',
      'field_landing_page_component',
    ];
    $config->set('third_party_settings.field_group.group_components.children', $third_party_settings);
  }
  $table_of_content_weight = $config->get('content.field_show_table_of_content.weight');
  $content = $config->get('content');
  if (!isset($content['field_node_display_headings'])) {
    $content['field_node_display_headings'] = [
      'weight' => $table_of_content_weight + 1,
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'options_buttons',
      'region' => 'content',
    ];
    $config->set('content', $content);
  }
  // Increase weight to sit below the new field.
  $landing_page_component = $config->get('content.field_landing_page_component.weight');
  $config->set('content.field_landing_page_component.weight', $landing_page_component + 1);
  $config->save();

  // Add to JSON.
  $json_config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.node--landing_page');

  $json_content = $json_config->get('resourceFields');
  if (!isset($json_content['field_node_display_headings'])) {
    $json_content['field_node_display_headings'] = [
      'fieldName' => 'field_node_display_headings',
      'publicName' => 'field_node_display_headings',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
    ];

    $json_config->set('resourceFields', $json_content);
  }

  $json_config->save();

  // Update show table of content label.
  $field_config = $config_factory->getEditable('field.field.node.landing_page.field_show_table_of_content');
  $description = 'The table of contents is automatically built from the heading structure of your page.';
  $field_config->set('description', $description);
  $field_config->save();
}

/**
 * Installs new promotion_card paragraph type.
 */
function tide_landing_page_update_8033() {
  $configs = [
    'paragraphs.paragraphs_type.promotion_card' => 'paragraphs_type',
    'field.storage.paragraph.field_promo_card_display_style' => 'field_storage_config',
    'field.storage.paragraph.field_customise' => 'field_storage_config',
    'field.field.paragraph.promotion_card.field_paragraph_title' => 'field_config',
    'field.field.paragraph.promotion_card.field_paragraph_summary' => 'field_config',
    'field.field.paragraph.promotion_card.field_paragraph_media' => 'field_config',
    'field.field.paragraph.promotion_card.field_paragraph_link' => 'field_config',
    'field.field.paragraph.promotion_card.field_customise' => 'field_config',
    'field.field.paragraph.promotion_card.field_promo_card_display_style' => 'field_config',
    'core.entity_view_display.paragraph.promotion_card.default' => 'entity_view_display',
    'core.entity_form_display.paragraph.promotion_card.default' => 'entity_form_display',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  // Add the new paragraph type to field_landing_page_component.
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('promotion_card', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['promotion_card'] = 'promotion_card';
      $handler_settings['target_bundles_drag_drop']['promotion_card']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }

  // Add paragraph type to JSON.
  $json_field = 'jsonapi_extras.jsonapi_resource_config.paragraph--promotion_card';
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
  $config_storage = \Drupal::service('config.storage');
  $config_read = _tide_read_config($json_field, $config_location, TRUE);
  $config_storage->write($json_field, $config_read);
}

/**
 * Installs new navigation_card paragraph type.
 */
function tide_landing_page_update_8034() {
  $configs = [
    'paragraphs.paragraphs_type.navigation_card' => 'paragraphs_type',
    'field.storage.paragraph.field_nav_card_display_style' => 'field_storage_config',
    'field.field.paragraph.navigation_card.field_paragraph_title' => 'field_config',
    'field.field.paragraph.navigation_card.field_paragraph_summary' => 'field_config',
    'field.field.paragraph.navigation_card.field_paragraph_media' => 'field_config',
    'field.field.paragraph.navigation_card.field_paragraph_link' => 'field_config',
    'field.field.paragraph.navigation_card.field_customise' => 'field_config',
    'field.field.paragraph.navigation_card.field_nav_card_display_style' => 'field_config',
    'core.entity_view_display.paragraph.navigation_card.default' => 'entity_view_display',
    'core.entity_form_display.paragraph.navigation_card.default' => 'entity_form_display',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  // Add the new paragraph type to field_landing_page_component.
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('navigation_card', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['navigation_card'] = 'navigation_card';
      $handler_settings['target_bundles_drag_drop']['navigation_card']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }

  // Add paragraph type to JSON.
  $json_field = 'jsonapi_extras.jsonapi_resource_config.paragraph--navigation_card';
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
  $config_storage = \Drupal::service('config.storage');
  $config_read = _tide_read_config($json_field, $config_location, TRUE);
  $config_storage->write($json_field, $config_read);
}

/**
 * Updates cards.
 */
function tide_landing_page_update_8035(&$sandbox) {
  if (getenv("LAGOON_ENVIRONMENT_TYPE") != 'production') {
    return;
  }
  if (!isset($sandbox['total'])) {
    $paragraph_query = \Drupal::entityTypeManager()
      ->getStorage('paragraph')
      ->getQuery();
    $paragraph_query->condition('parent_type', 'node')
      ->condition('parent_field_name', 'field_landing_page_component');
    $or = $paragraph_query->orConditionGroup()
      ->condition('type', 'card_navigation')
      ->condition('type', 'card_navigation_auto')
      ->condition('type', 'card_navigation_featured')
      ->condition('type', 'card_navigation_featured_auto')
      ->condition('type', 'card_promotion')
      ->condition('type', 'card_promotion_auto')
      ->condition('type', 'card_event')
      ->condition('type', 'card_event_auto');
    $paragraph_query->condition($or);
    $count = $paragraph_query->count()->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;
  }
  $batch_size = 50;
  $paragraph_query = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->getQuery();
  $or = $paragraph_query->orConditionGroup()
    ->condition('type', 'card_navigation')
    ->condition('type', 'card_navigation_auto')
    ->condition('type', 'card_navigation_featured')
    ->condition('type', 'card_navigation_featured_auto')
    ->condition('type', 'card_promotion')
    ->condition('type', 'card_promotion_auto')
    ->condition('type', 'card_event')
    ->condition('type', 'card_event_auto');
  $paragraph_query->condition($or);
  $paragraph_query->condition('parent_type', 'node')
    ->condition('parent_field_name', 'field_landing_page_component')
    ->condition('id', $sandbox['current'], '>')
    ->sort('id', 'ASC')
    ->range(0, $batch_size);
  $paragraph_ids = $paragraph_query->execute();
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $paragraph_type_mapping = [
    'card_navigation' => 'navigation_card',
    'card_navigation_auto' => 'navigation_card',
    'card_navigation_featured' => 'navigation_card',
    'card_navigation_featured_auto' => 'navigation_card',
    'card_promotion' => 'promotion_card',
    'card_promotion_auto' => 'promotion_card',
    'card_event' => 'promotion_card',
    'card_event_auto' => 'promotion_card',
  ];
  $display_field_names = [
    'navigation_card' => 'field_nav_card_display_style',
    'promotion_card' => 'field_promo_card_display_style',
  ];
  foreach ($paragraph_ids as $paragraph_id) {
    $sandbox['current'] = $paragraph_id;
    $paragraph = Paragraph::load($paragraph_id);
    $nodes = $node_storage->loadByProperties(['field_landing_page_component' => $paragraph->id()]);
    if (empty($nodes) && in_array($paragraph->bundle(), [
      'card_navigation_featured_auto',
      'card_navigation_featured',
      'card_navigation_auto',
      'card_navigation',
    ])) {
      $paragraph->delete();
      $sandbox['processed']++;
      continue;
    }
    if (count($nodes) > 0) {
      foreach ($nodes as $node) {
        // If the link is empty, delete the paragraph.
        $link_details = _get_link_value($paragraph);
        $values = $node->get('field_landing_page_component')->getValue();
        if (empty($link_details)) {
          $key = array_search($paragraph->id(), array_column($values, 'target_id'));
          $node->get('field_landing_page_component')->removeItem($key);
          $node->setNewRevision(FALSE);
          $node->save();
          continue;
        }
        $new_paragraph = Paragraph::create([
          'type' => $paragraph_type_mapping[$paragraph->bundle()],
          'parent_id' => $node->id(),
          'parent_type' => 'node',
          'parent_field_name' => 'field_landing_page_component',
        ]);
        $new_paragraph->set('field_paragraph_link', $link_details[0]);
        $field_paragraph_media = _tide_card_consolidation_get_value($paragraph, 'media');
        if ($field_paragraph_media != NULL) {
          $new_paragraph->field_paragraph_media->target_id = $field_paragraph_media;
        }
        if ($link_details[1] == 'external') {
          if ($field_paragraph_media == NULL) {
            $new_paragraph->{$display_field_names[$paragraph_type_mapping[$paragraph->bundle()]]}->value = 'noImage';
          }
          else {
            $new_paragraph->{$display_field_names[$paragraph_type_mapping[$paragraph->bundle()]]}->value = _get_card_display_style($paragraph);
          }
        }
        if ($link_details[1] == 'internal') {
          $new_paragraph->{$display_field_names[$paragraph_type_mapping[$paragraph->bundle()]]}->value = _get_card_display_style($paragraph);
        }
        $field_paragraph_title = _tide_card_consolidation_get_value($paragraph, 'title');
        if ($field_paragraph_title) {
          $new_paragraph->field_paragraph_title->value = $field_paragraph_title;
        }
        $field_paragraph_summary = _tide_card_consolidation_get_value($paragraph, 'summary');
        if ($field_paragraph_summary) {
          $new_paragraph->field_paragraph_summary->value = $field_paragraph_summary;
        }
        $new_paragraph->save();
        $key = array_search($paragraph->id(), array_column($values, 'target_id'));
        $values[$key]['target_id'] = $new_paragraph->id();
        $values[$key]['target_revision_id'] = $new_paragraph->getRevisionId();
        $node->set('field_landing_page_component', $values);
        $node->setNewRevision(FALSE);
        $node->save();
      }
      $paragraph->delete();
    }
    $sandbox['processed']++;
  }
  $sandbox['#finished'] = $sandbox['total'] ? $sandbox['processed'] / $sandbox['total'] : 1;
  $sandbox['#finished'] = $sandbox['#finished'] > 1 ? 1 : $sandbox['#finished'];
}

/**
 * Helper function to get values.
 */
function _tide_card_consolidation_get_value(Paragraph $paragraph, $field) {
  $result = NULL;
  switch ($field) {
    case "title":
      if ($paragraph->hasField('field_paragraph_title') && !$paragraph->field_paragraph_title->isEmpty()) {
        $result = $paragraph->field_paragraph_title->value;
      }
      elseif ($paragraph->hasField('field_paragraph_cta_text') && !$paragraph->field_paragraph_cta_text->isEmpty()) {
        $result = $paragraph->field_paragraph_cta_text->value;
      }
      break;

    case "summary":
      if ($paragraph->hasField('field_paragraph_summary') && !$paragraph->field_paragraph_summary->isEmpty()) {
        $result = $paragraph->field_paragraph_summary->value;
      }
      break;

    case "media":
      if ($paragraph->hasField('field_paragraph_media') && !$paragraph->field_paragraph_media->isEmpty()) {
        $result = $paragraph->field_paragraph_media->target_id;
      }
      break;
  }
  return $result;
}

/**
 * Gets card display style value.
 */
function _get_card_display_style(Paragraph $paragraph) {
  $result = 'noImage';
  switch ($paragraph->bundle()) {
    case 'card_navigation_featured':
    case 'card_navigation_featured_auto':
      $result = 'featured';
      break;

    case 'card_promotion':
    case 'card_promotion_auto':
    case 'card_event':
    case 'card_event_auto':
      $result = 'thumbnail';
      break;
  }
  return $result;
}

/**
 * Gets link related values.
 */
function _get_link_value(Paragraph $paragraph) {
  $path_details = [];
  switch ($paragraph->bundle()) {
    case 'card_navigation':
    case 'card_navigation_featured':
    case 'card_promotion':
      if (!$paragraph->field_paragraph_link->isEmpty()) {
        $uri = $paragraph->field_paragraph_link->uri;
        $path_details = $paragraph->get('field_paragraph_link')->getValue();
        if (!UrlHelper::isExternal($uri)) {
          if (strpos($uri, 'internal:/node/') !== FALSE) {
            $uri = str_replace('internal:/', 'entity:', $uri);
            $path_details[0]['uri'] = $uri;
          }
        }
        $path_details[1] = UrlHelper::isExternal($uri) ? 'external' : 'internal';
        $path_details[2] = 'field_paragraph_link';
      }
      break;

    case 'card_navigation_auto':
    case 'card_navigation_featured_auto':
    case 'card_promotion_auto':
    case 'card_event_auto':
      if (!$paragraph->field_paragraph_reference->isEmpty()) {
        if (Node::load($paragraph->field_paragraph_reference->target_id)) {
          $path_details = [
            [
              'uri' => 'entity:node/' . $paragraph->field_paragraph_reference->target_id,
              'title' => '',
              'options' => [],
            ],
            'internal',
            'field_paragraph_reference',
          ];
        }
      }
      break;

    default:
      if (!$paragraph->field_paragraph_cta->isEmpty()) {
        $uri = $paragraph->field_paragraph_cta->uri;
        $path_details = $paragraph->get('field_paragraph_cta')->getValue();
        if (!UrlHelper::isExternal($uri)) {
          if (strpos($uri, 'internal:/node/') !== FALSE) {
            $uri = str_replace('internal:/', 'entity:', $uri);
            $path_details[0]['uri'] = $uri;
          }
        }
        $path_details[1] = UrlHelper::isExternal($uri) ? 'external' : 'internal';
        $path_details[2] = 'field_paragraph_cta';
      }
      break;
  }
  return $path_details;
}

/**
 * Installs new data_table paragraph type.
 */
function tide_landing_page_update_8036() {
  $configs = [
    'paragraphs.paragraphs_type.data_table' => 'paragraphs_type',
    'field.storage.paragraph.field_data_table_content' => 'field_storage_config',
    'field.storage.paragraph.field_first_column_table_header' => 'field_storage_config',
    'field.storage.paragraph.field_first_row_table_header' => 'field_storage_config',
    'field.storage.paragraph.field_table_orientation' => 'field_storage_config',
    'field.field.paragraph.data_table.field_data_table_content' => 'field_config',
    'field.field.paragraph.data_table.field_first_column_table_header' => 'field_config',
    'field.field.paragraph.data_table.field_first_row_table_header' => 'field_config',
    'field.field.paragraph.data_table.field_table_orientation' => 'field_config',
    'core.entity_view_display.paragraph.data_table.default' => 'entity_view_display',
    'core.entity_form_display.paragraph.data_table.default' => 'entity_form_display',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  // Add the new paragraph type to field_landing_page_component.
  $field = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('data_table', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['data_table'] = 'data_table';
      $handler_settings['target_bundles_drag_drop']['data_table']['enabled'] = TRUE;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }

  // Add paragraph type to JSON.
  $json_field = 'jsonapi_extras.jsonapi_resource_config.paragraph--data_table';
  $config_location = [drupal_get_path('module', 'tide_landing_page') . '/config/optional'];
  $config_storage = \Drupal::service('config.storage');
  $config_read = _tide_read_config($json_field, $config_location, TRUE);
  $config_storage->write($json_field, $config_read);
}

/**
 * Create a new field group.
 *
 * @param string $label
 *   The label.
 * @param string $type
 *   The format type (tabs, tab, etc.).
 * @param array $settings
 *   The format settings.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The weight.
 * @param string $parent
 *   The parent name.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_landing_page_new_field_group(string $label, string $type, array $settings, string $region = 'content', int $weight = 0, string $parent = '', array $children = []) : array {
  return [
    'label' => $label,
    'parent_name' => $parent,
    'children' => $children,
    'format_type' => $type,
    'format_settings' => $settings,
    'region' => $region,
    'weight' => $weight,
  ];
}

/**
 * Create a new tabs field group.
 *
 * @param string $label
 *   The label.
 * @param string $direction
 *   The tabs direction (horizontal or vertical).
 * @param string $id
 *   The CSS ID.
 * @param string $classes
 *   The CSS classes.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The form weight.
 * @param string $parent
 *   The parent name.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_landing_page_new_field_group_tabs(string $label, string $direction = 'horizontal', string $id = '', string $classes = '', string $region = 'content', int $weight = 0, string $parent = '', array $children = []) : array {
  return _tide_landing_page_new_field_group($label, 'tabs', [
    'direction' => $direction,
    'id' => $id,
    'classes' => $classes,
  ], $region, $weight, $parent, $children);
}

/**
 * Create a new tab field group.
 *
 * @param string $label
 *   The label.
 * @param string $parent
 *   The parent name.
 * @param array $settings
 *   The format settings.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The form weight.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_landing_page_new_field_group_tab(string $label, string $parent, array $settings = [], string $region = 'content', int $weight = 0, array $children = []) : array {
  return _tide_landing_page_new_field_group($label, 'tab', [
    'description' => '',
    'formatter' => 'closed',
    'required_fields' => TRUE,
    'id' => '',
    'classes' => '',
  ] + $settings, $region, $weight, $parent, $children);
}

/**
 * Update the node form of Landing Page.
 */
function tide_landing_page_update_8037() {
  // Rename paragraph bundles.
  $paragraph_updates = [
    'basic_text' => [
      'description' => t('Use this block to add text and media to your page. Content sits in the middle of your page between header and footer elements.'),
    ],
    'call_to_action' => [
      'description' => t('Prompt users to take action, like register for an e-newsletter. Add a title, description, image, link and call to action button.'),
    ],
    'card_keydates' => [
      'description' => t('Add this card to feature important dates. Add a date, title, summary and link.'),
    ],
    'card_carousel' => [
      'description' => t('Feature up to 9 recent news or events in a scrollable carousel. It allows you to add a title, date, summary and link.'),
    ],
    'complex_image' => [
      'description' => t('Embed a complex image within a content page so users can access information in different formats. Users can access accessible data, view image in full screen or download the image.'),
    ],
    'key_journeys' => t('Header links'),
    'media_gallery' => [
      'description' => t('Embed a scrollable carousel of images within a content page, once built in the Custom block library. Images can be viewed in full screen. Add a title and summary to each image.'),
    ],
    'navigation_card' => [
      'description' => t('Create a tiled link to a page that allows users to navigate deeper into a topic. This is best used on a 2-column page layout.'),
    ],
    'promotion_card' => [
      'description' => t('This card is best used on a 3-column page layout. Add a title, image, summary and link to an internal or external page.'),
    ],
    'embedded_search_form' => t('Search banner'),
    'embedded_webform' => [
      'description' => t('Embed a Drupal form within a content page. Users can populate fields and submit their information.'),
    ],
    'form_embed_openforms' => [
      'description' => t('Embed an OpenForms form within a content page. Users can populate fields and submit their information.'),
    ],
  ];
  foreach ($paragraph_updates as $bundle => $update) {
    if (!is_array($update)) {
      $update = ['label' => $update];
    }
    /** @var \Drupal\paragraphs\ParagraphsTypeInterface $type */
    $type = ParagraphsType::load($bundle);
    if ($type) {
      $entity_type = $type->getEntityType();
      if (isset($update['label'])) {
        $label_key = $entity_type->getKey('label');
        $type->set($label_key, $update['label']);
      }
      if (isset($update['description'])) {
        $type->set('description', $update['description']);
      }
      $type->save();
    }
  }

  // Rename label of allowed values of Display Headings field.
  $field_storage = FieldStorageConfig::loadByName('node',
    'field_node_display_headings');
  $allowed_values = $field_storage->getSettings()['allowed_values'];
  $allowed_values['showH2'] = t('Show headings. H2 headings are automatically shown as default.');
  $allowed_values['showH2AndH3'] = t('Show headings and subheadings. H2 and H3 headings are shown.');
  $field_storage->setSetting('allowed_values', $allowed_values);
  $field_storage->save();

  // Update the field instances.
  $update_field_config = [
    'field_landing_page_key_journeys' => [
      'label' => t('Header links'),
      'description' => t('Header links are displayed alongside the page title on introduction banner. They link to other critical pages.'),
    ],
    'field_landing_page_hero_image' => [
      'description' => t("Full-width background images display at the top of the page behind the page title. One image can be added and must be 1600px wide x 600px high. If a hero image is used, header links will not display."),
    ],
    'field_show_hero_image_caption' => [
      'label' => t('Show Full-with background image caption'),
    ],
    'field_landing_page_hero_banner' => [
      'label' => t('Call to action banner'),
    ],
    'field_featured_image' => [
      'description' => t("Feature images don't display on this page. They display in featured card or navigation links to this page. Must be 496px high x 818px wide."),
    ],
    'field_graphical_image' => [
      'label' => t('Top corner graphic'),
    ],
    'field_bottom_graphical_image' => [
      'label' => t('Bottom corner graphic'),
    ],
    'field_landing_page_hero_logo' => [
      'label' => t('Logo'),
      'description' => t('A small logo can be added above the page title. This will not appear if ‘Full-width background image’ header style is selected.'),
    ],
    'field_landing_page_c_primary' => [
      'description' => '',
    ],
    'field_landing_page_c_secondary' => [
      'description' => '',
    ],
    'field_landing_page_component' => [
      'description' => t('<p>Add text, links, media and cards to build your page.</p>'),
    ],
    'field_show_table_of_content' => [
      'label' => t('Show table of contents?'),
    ],
    'field_show_whats_next' => [
      'label' => t("Show What's next?"),
    ],
    'field_show_site_section_nav' => [
      'label' => t('Show Site-section navigation?'),
    ],
    'field_show_social_sharing' => [
      'label' => t('Social sharing'),
      'required' => TRUE,
      'description' => t('The social sharing box can be hidden in special circumstances.'),
    ],
  ];
  foreach ($update_field_config as $field_name => $replacements) {
    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
    $field_config = FieldConfig::loadByName('node', 'landing_page',
      $field_name);
    if ($field_config) {
      $config = $field_config->toArray();
      $config = array_replace_recursive($config, $replacements);
      /** @var \Drupal\Core\Field\FieldConfigInterface $new_field_config */
      $new_field_config = FieldConfig::create($config);
      $new_field_config->original = $field_config;
      $new_field_config->enforceIsNew(FALSE);
      $new_field_config->save();
    }
  }

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = EntityFormDisplay::load('node.landing_page.default');
  if (!$form_display) {
    return;
  }

  // Update field widgets.
  $update_field_widgets = [
    // Header.
    'title' => ['weight' => 0],
    'field_landing_page_summary' => ['weight' => 10],
    'field_landing_page_intro_text' => ['weight' => 20],
    'field_landing_page_key_journeys' => [
      'settings' => [
        'title' => t('Header link'),
        'title_plural' => t('Header links'),
      ],
      'weight' => 30,
    ],
    // Customised Header.
    'field_landing_page_hero_banner' => [
      'settings' => ['edit_mode' => 'open'],
      'weight' => 10,
    ],
    'field_landing_page_hero_image' => [
      'settings' => ['open' => TRUE],
      'weight' => 20,
    ],
    'field_landing_page_hero_theme' => [
      'settings' => ['open' => TRUE],
      'weight' => 25,
    ],
    'field_graphical_image' => [
      'settings' => ['open' => TRUE],
      'weight' => 30,
    ],
    'field_bottom_graphical_image' => [
      'settings' => ['open' => TRUE],
      'weight' => 40,
    ],
    'field_landing_page_hero_logo' => [
      'settings' => ['open' => TRUE],
      'weight' => 50,
    ],
    // Header addon.
    'field_landing_page_header' => [
      'settings' => ['add_mode' => 'modal'],
    ],
    // Featured image.
    'field_featured_image' => [
      'settings' => ['open' => TRUE],
      'weight' => -90,
    ],
    // Page Campaign.
    'field_landing_page_c_primary' => ['weight' => -79],
    'field_show_c_primary_caption' => ['weight' => -78],
    'field_landing_page_c_secondary' => ['weight' => -75],
    // Content.
    'field_landing_page_component' => [
      'settings' => ['add_mode' => 'modal'],
    ],
    // Sidebar.
    'field_related_links' => [
      'type' => 'entity_reference_paragraphs',
      'settings' => [
        'title' => t('Link'),
        'title_plural' => t('Links'),
        'edit_mode' => 'closed',
        'add_mode' => 'button',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
      ],
    ],
    'field_show_social_sharing' => [
      'type' => 'options_buttons',
      'weight' => 40,
    ],
    // General.
    'field_show_topic_term_and_tags' => ['weight' => 1],
    'field_show_content_rating' => ['weight' => 2],
    'field_landing_page_bg_colour' => ['weight' => 3],
  ];
  foreach ($update_field_widgets as $field => $replacements) {
    if (!is_array($replacements)) {
      $replacements = ['weight' => $replacements];
    }
    $component = $form_display->getComponent($field);
    if ($component) {
      $component = array_replace_recursive($component, $replacements);
      $form_display->setComponent($field, $component);
    }
  }

  // Update the field groups.
  $field_group = $form_display->getThirdPartySettings('field_group');

  // Header section.
  $field_group['group_section_header'] = _tide_landing_page_new_field_group_tabs('Header Section',
    'horizontal', 'node-form-group-header-section', '', 'content', -100);
  $field_group['group_section_header']['children'] = [
    'group_header',
    'group_customised_header',
    'group_header_addon',
  ];

  // Header - Header tab.
  $field_group['group_header'] = _tide_landing_page_new_field_group_tab('Header',
    'group_section_header', [], 'content', -99);
  $field_group['group_header']['children'] = [
    'title',
    'field_landing_page_summary',
    'field_landing_page_intro_text',
    'field_landing_page_key_journeys',
  ];

  // Header - Customised header tab.
  $field_group['group_customised_header'] = _tide_landing_page_new_field_group_tab('Customised Header',
    'group_section_header', [], 'content', -98);
  $field_group['group_customised_header']['children'] = [
    'field_landing_page_hero_image',
    'field_landing_page_hero_theme',
    'field_landing_page_hero_logo',
    'field_graphical_image',
    'field_bottom_graphical_image',
    'field_landing_page_hero_banner',
  ];

  // Header - Header add-on tab.
  $field_group['group_header_addon'] = _tide_landing_page_new_field_group_tab('Header extras',
    'group_section_header', [], 'content', -97);
  $field_group['group_header_addon']['children'] = [
    'field_landing_page_header',
    'field_show_ack_of_country',
  ];

  // Campaign section.
  $field_group['group_section_campaign'] = _tide_landing_page_new_field_group_tabs('Campaign Section',
    'horizontal', 'node-form-group-page-campaign', '', 'content', -80);
  $field_group['group_section_campaign']['children'] = [
    'group_campaign',
  ];

  // Campaign - Page campaign tab.
  $field_group['group_campaign'] = _tide_landing_page_new_field_group_tab('Page campaign',
    'group_section_campaign', [], 'content', -79);
  $field_group['group_campaign']['children'] = [
    'group_primary_campaign',
    'group_secondary_campaign',
  ];

  // Campaign - Page campaign tab - Primary campaign.
  $field_group['group_primary_campaign'] = _tide_landing_page_new_field_group('Primary campaign',
    'details', [
      'open' => FALSE,
      'description' => t('Primary campaigns display at the top of the page between the header section and the body content section. They span the full width of the content area. Start typing the name of your custom block component to display your campaign.'),
    ], 'content', 0, 'group_campaign', [
      'field_landing_page_c_primary',
      'field_show_c_primary_caption',
    ]);
  // Campaign - Page campaign tab - Secondary campaign.
  $field_group['group_secondary_campaign'] = _tide_landing_page_new_field_group('Secondary campaign',
    'details', [
      'open' => FALSE,
      'description' => t('Secondary campaign displays after the content area, just above the page footer. They span the full width of the content area. Start typing the name of your custom block component to display your campaign'),
    ], 'content', 10, 'group_campaign', [
      'field_landing_page_c_secondary',
    ]);

  // Content section.
  $field_group['group_section_content'] = _tide_landing_page_new_field_group_tabs('Content Section',
    'horizontal', 'node-form-group-content-section', '', 'content', -70);
  $field_group['group_section_content']['children'] = [
    'group_components',
    'group_header_content',
    'group_bottom_feature',
  ];
  // Content - Page content tab.
  if (isset($field_group['group_components'])) {
    $field_group['group_components'] = array_replace_recursive($field_group['group_components'],
      [
        'label' => 'Page content',
        'format_type' => 'tab',
        'parent_name' => 'group_section_content',
        'region' => 'content',
        'weight' => -79,
      ]);
  }

  // Sidebar section.
  $field_group['group_section_sidebar'] = _tide_landing_page_new_field_group_tabs('Sidebar Section',
    'horizontal', 'node-form-group-sidebar-section', '', 'content', -60, '',
    ['group_sidebar']);
  // Sidebar - Sidebar tab.
  $field_group['group_sidebar'] = _tide_landing_page_new_field_group_tab('Sidebar',
    'group_section_sidebar', [], 'content', -61);
  $field_group['group_sidebar']['children'] = [
    'group_site_section_navigation',
    'group_site_section_navigation',
    'group_related_links',
    'group_whats_next',
    'group_contact_us',
    'field_show_social_sharing',
  ];
  if (isset($field_group['group_site_section_navigation'])) {
    $field_group['group_site_section_navigation'] = array_replace_recursive($field_group['group_site_section_navigation'],
      [
        'format_type' => 'details',
        'format_settings' => [
          'open' => FALSE,
          'description' => t('Add a site-section navigation on the right-hand side of your site.'),
        ],
        'parent_name' => 'group_sidebar',
        'region' => 'content',
        'weight' => 0,
      ]);
  }
  if (isset($field_group['group_related_links'])) {
    $field_group['group_related_links'] = array_replace_recursive($field_group['group_related_links'],
      [
        'format_type' => 'details',
        'format_settings' => [
          'open' => FALSE,
          'description' => t('Related pages can be linked from this sidebar.'),
        ],
        'parent_name' => 'group_sidebar',
        'region' => 'content',
        'weight' => 10,
      ]);
  }
  if (isset($field_group['group_whats_next'])) {
    $field_group['group_whats_next'] = array_replace_recursive($field_group['group_whats_next'],
      [
        'format_type' => 'details',
        'format_settings' => ['open' => FALSE],
        'parent_name' => 'group_sidebar',
        'region' => 'content',
        'weight' => 20,
      ]);
  }
  if (isset($field_group['group_contact_us'])) {
    $field_group['group_contact_us'] = array_replace_recursive($field_group['group_contact_us'],
      [
        'format_type' => 'details',
        'format_settings' => [
          'open' => FALSE,
          'description' => t('Specific contact details - name, address, phone, email can be added in a block to the sidebar.'),
        ],
        'parent_name' => 'group_sidebar',
        'region' => 'content',
        'weight' => 30,
      ]);
  }

  foreach ($field_group as $group_name => $group_settings) {
    $form_display->setThirdPartySetting('field_group', $group_name,
      $group_settings);
  }

  // Removes unused groups.
  $unused_groups = [
    'group_key_journeys',
    'group_content',
    'group_header_content',
    'group_top_banner',
    'group_bottom_',
    'group_right_column',
    'group_blocks',
  ];
  foreach ($unused_groups as $group_name) {
    unset($field_group[$group_name]);
    $form_display->unsetThirdPartySetting('field_group', $group_name);
  }

  $form_display->save();
}

/**
 * Change icon of paragraph types.
 */
function tide_landing_page_update_8038() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $icon_dir = drupal_get_path('module',
      'tide_landing_page') . DIRECTORY_SEPARATOR . 'icons';

  $paragraphs = [
    'basic_text',
    'card_carousel',
    'card_keydates',
    'complex_image',
    'embedded_webform',
    'form_embed_openforms',
    'media_gallery',
    'navigation_card',
    'promotion_card',
  ];
  foreach ($paragraphs as $paragraph_type_id) {
    $icon_filename = $icon_dir . DIRECTORY_SEPARATOR . $paragraph_type_id . '.svg';
    _tide_set_paragraph_type_icon($paragraph_type_id, $icon_filename);
  }
}
