<?php

/**
 * @file
 * Tide Landing Page module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\workflows\Entity\Workflow;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Field\WidgetBase;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_landing_page_entity_bundle_create($entity_type_id, $bundle) {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  if ($entity_type_id == 'node') {
    // Support the new content type in the Referenced Content field
    // of the Card automated paragraphs.
    $supported_paragraph_types = [
      'card_navigation_featured_auto',
      'card_navigation_auto',
      'card_promotion_auto',
    ];
    foreach ($supported_paragraph_types as $supported_paragraph_type) {
      $field_config = FieldConfig::loadByName("paragraph", $supported_paragraph_type, "field_paragraph_reference");
      if ($field_config) {
        $handler_settings = $field_config->getSetting('handler_settings');
        $handler_settings['target_bundles'][$bundle] = $bundle;
        $field_config->setSetting('handler_settings', $handler_settings);
        $field_config->save();
      }
    }

    // Enable Editorial workflow for landing page if workflow module is enabled.
    if ($bundle == 'landing_page') {
      if ($moduleHandler->moduleExists('workflows')) {
        $editorial_workflow = Workflow::load('editorial');
        if ($editorial_workflow) {
          $editorial_workflow->getTypePlugin()
            ->addEntityTypeAndBundle('node', 'landing_page');
          $editorial_workflow->save();
        }
      }
    }
  }

  // Add the Featured News paragraph to Landing Page component if exists.
  if ($entity_type_id == 'paragraph') {
    $field_config = FieldConfig::loadByName('node', 'landing_page', 'field_landing_page_component');
    if ($field_config) {
      $handler_settings = $field_config->getSetting('handler_settings');

      $is_featured_news = ($bundle == 'featured_news' && $moduleHandler->moduleExists('tide_news'));
      $is_embedded_webform = ($bundle == 'embedded_webform' && $moduleHandler->moduleExists('tide_webform'));
      $is_automated_listing = ($bundle == 'automated_card_listing' && $moduleHandler->moduleExists('tide_automated_listing'));

      if ($is_featured_news || $is_embedded_webform || $is_automated_listing) {
        $handler_settings['target_bundles'][$bundle] = $bundle;
        $field_config->setSetting('handler_settings', $handler_settings);
        $field_config->save();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function tide_landing_page_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, [
    'node_landing_page_form',
    'node_landing_page_edit_form',
    'node_landing_page_quick_node_clone_form',
  ])) {
    // Change form layout..
    $form['#attached']['library'][] = 'tide_landing_page/landing_page_form';

    // Hide the field Show Acknowledgement to Country if tide_site is missing.
    if (!\Drupal::moduleHandler()->moduleExists('tide_site')) {
      $form['field_show_ack_of_country']['#attributes']['class'][] = 'hidden';
    }

    // Move Show Hero Image caption checkbox to Hero Image field group.
    if (isset($form['field_show_hero_image_caption']) && isset($form['field_landing_page_hero_image']['widget'])) {
      $form['field_landing_page_hero_image']['widget']['field_show_hero_image_caption'] = $form['field_show_hero_image_caption'];
      unset($form['field_show_hero_image_caption']);
    }

    if (isset($form['field_landing_page_component']['widget'][0])) {
      foreach ($form['field_landing_page_component']['widget'] as $key => $item) {
        if (is_numeric($key)) {
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_cta']['widget'][0]['uri']['#title'] = new TranslatableMarkup("CTA link");
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_cta']['widget'][0]['uri']['#description'] = new TranslatableMarkup("A link to a page showing a longer list of public holidays or special dates. Start typing the title of a page in the CMS to select it or paste in a full external URL (eg http://www.example.com).");
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_cta']['widget'][0]['title']['#title'] = new TranslatableMarkup("CTA text");
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_cta']['widget'][0]['title']['#description'] = new TranslatableMarkup("Type a strong call to action that describes the content of the link destination (eg Find all public holidays).");
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_keydates']['widget']['add_more']['add_more_button_keydates']['#value'] = new TranslatableMarkup("Add another date");
          $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_accordion']['widget']['add_more']['add_more_button_accordion_content']['#value'] = new TranslatableMarkup("Add another accordion item");
          if (isset($form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_accordion']['widget'][0])) {
            foreach ($form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_accordion']['widget'] as $field => $sub_item) {
              if (is_numeric($field)) {
                $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_accordion']['widget'][$field]['top']['type']['label']['#markup'] = '<span class="paragraph-type-label"></span>';
              }
            }
          }
          if (isset($form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_keydates']['widget'][0])) {
            foreach ($form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_keydates']['widget'] as $field => $sub_item) {
              if (is_numeric($field)) {
                $form['field_landing_page_component']['widget'][$key]['subform']['field_paragraph_keydates']['widget'][$field]['top']['type']['label']['#markup'] = '<span class="paragraph-type-label"></span>';
              }
            }
          }
        }
      }
    }
  }
  // Add conditional field for show table of content.
  if (isset($form['field_node_display_headings']) && isset($form['field_show_table_of_content'])) {
    $form['field_node_display_headings']['#states'] = [
      'visible' => [
        ':input[name="field_show_table_of_content[value]"]' => [
          'checked' => TRUE,
        ],
      ],
    ];
    if (!isset($form['field_node_display_headings']['widget']['#default_value']) || empty($form['field_node_display_headings']['widget']['#default_value'])) {
      $form['field_node_display_headings']['widget']['#default_value'] = 'showH2';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function tide_landing_page_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (!empty($element['#paragraph_type']) && $element['#paragraph_type'] == 'embedded_search_form') {
    /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $items */
    $items = $context['items'];
    $parent_field = $items->getName();
    $condition = [
      ':input[name="' . $parent_field . '[' . $context['delta'] . '][subform][field_paragraph_search_block]"]' => ['value' => 'custom'],
    ];
    if (!empty($element['subform']['field_paragraph_search_url']['widget'][0]['value'])) {
      $element['subform']['field_paragraph_search_url']['#states']['visible'] = $condition;
      $element['subform']['field_paragraph_search_url']['widget'][0]['value']['#states']['required'] = $condition;
    }
    if (!empty($element['subform']['field_paragraph_search_ph'])) {
      $element['subform']['field_paragraph_search_ph']['#states']['visible'] = $condition;
    }
    if (!empty($element['subform']['field_paragraph_search_target'])) {
      $element['subform']['field_paragraph_search_target']['#states']['visible'] = $condition;
    }
  }

  // Displaying field_call_to_action_title depends on field_banner_display_type.
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_field_name = $field_definition->getName();
  if ($paragraph_field_name == 'field_landing_page_header') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_field_name, $form_state);
    $paragraph = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph->bundle();
    if ($paragraph_type == 'introduction_banner') {
      $selector = sprintf('input[name="%s[%d][subform][%s]"]', $paragraph_field_name, $element['#delta'], 'field_banner_display_type');
      if (isset($element['subform']['field_call_to_action_title'])) {
        $element['subform']['field_call_to_action_title']['#states'] = [
          'visible' => [
            $selector => ['value' => 'buttons'],
          ],
        ];
      }
      if (isset($element['subform']['field_paragraph_links']['widget'])) {
        foreach ($element['subform']['field_paragraph_links']['widget'] as $key => $links) {
          if (is_numeric($key)) {
            $element['subform']['field_paragraph_links']['widget'][$key]['title']['#title'] = t('Link text / Button label');
          }
        }
      }
    }
  }
}
